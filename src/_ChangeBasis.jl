# Change Basis between B-Spline Spaces
# See https://hackmd.io/lpA0D0ySTQ6Hq1CdaaONxQ for more information.

@doc raw"""
Return a coefficient matrix A which satisfy
```math
B_{(i,p,k)} = \sum_{j}A_{i,j}B_{(j,p',k')}
```

Assumption:
* ``P ‚äÜ P‚Ä≤``
"""
_changebasis_R

function _changebasis_R(P::AbstractBSplineSpace{0,T}, P‚Ä≤::AbstractBSplineSpace{p‚Ä≤,T‚Ä≤}) where {p‚Ä≤,T,T‚Ä≤}
    P ‚äÜ P‚Ä≤ || throw(DomainError((P,P‚Ä≤),"P ‚äÜ P‚Ä≤ should be hold."))
    U = StaticArrays.arithmetic_closure(promote_type(T,T‚Ä≤))
    n = dim(P)
    n‚Ä≤ = dim(P‚Ä≤)
    A‚Å∞ = U[bsplinesupport(P‚Ä≤, j) ‚äÜ bsplinesupport(P, i) for i in 1:n, j in 1:n‚Ä≤]
    A‚Å∞[:, findall(_iszeros(P‚Ä≤))] .= zero(U)  # Strictly this should be NaN, but we use zero here to support Rational.
    return A‚Å∞
end

function _changebasis_R(P::AbstractBSplineSpace{p,T}, P‚Ä≤::AbstractBSplineSpace{p‚Ä≤,T‚Ä≤}) where {p,p‚Ä≤,T,T‚Ä≤}
    P ‚äÜ P‚Ä≤ || throw(DomainError((P,P‚Ä≤),"P ‚äÜ P‚Ä≤ should be hold."))
    U = StaticArrays.arithmetic_closure(promote_type(T,T‚Ä≤))
    k = knotvector(P)
    k‚Ä≤ = knotvector(P‚Ä≤)
    n = dim(P)
    n‚Ä≤ = dim(P‚Ä≤)

    A·µñ‚Åª¬π = _changebasis_R(_lower(P), _lower(P‚Ä≤))  # (n+1) √ó (n‚Ä≤+1) matrix
    A·µñ = zeros(U, n, n‚Ä≤)  # n √ó n‚Ä≤ matrix

    Z = _iszeros(_lower(P‚Ä≤))
    W = findall(Z)
    K‚Ä≤ = [k‚Ä≤[i+p‚Ä≤] - k‚Ä≤[i] for i in 1:n‚Ä≤+1]
    K = [ifelse(k[i+p] ‚â† k[i], 1 / (k[i+p] - k[i]), 0.0) for i in 1:n+1]
    Œî = (p / p‚Ä≤) * [K‚Ä≤[j] * (K[i] * A·µñ‚Åª¬π[i, j] - K[i+1] * A·µñ‚Åª¬π[i+1, j]) for i in 1:n, j in 1:n‚Ä≤+1]
    A·µñ[:, 1] = Œî[:, 1]
    A·µñ[:, n‚Ä≤] = -Œî[:, n‚Ä≤+1]

    # split A·µñ for sub-block
    if length(W) == 0
        Q = [1:n‚Ä≤]
    else
        Q = [1:W[1]-1, [W[i]:W[i+1]-1 for i in 1:length(W)-1]..., W[end]:n‚Ä≤]
    end
    Œª = length(Q)
    Œõ = length.(Q)
    AÃÉ·µñ = [A·µñ[:, q] for q in Q]

    for »∑ in 2:Œª-1
        if Œõ[»∑] == 1
            # if B(i,p‚Ä≤,k‚Ä≤) = 0
            AÃÉ·µñ[»∑] .= zero(U)  # Strictly this should be NaN, but we use zero here to support Rational.
        end
    end
    for »∑ in 1:Œª-1
        if Œõ[»∑] ‚â• 2
            t = k‚Ä≤[W[»∑]]
            for i in 1:n
                AÃÉ·µñ[»∑][i, end] = bsplinebasis‚Çã‚ÇÄ(P,i,t)
            end
        end
    end
    for »∑ in 2:Œª
        if Œõ[»∑] ‚â• 2
            t = k‚Ä≤[W[»∑-1]+p]
            for i in 1:n
                AÃÉ·µñ[»∑][i, 1] = bsplinebasis‚Çä‚ÇÄ(P,i,t)
            end
        end
    end
    for »∑ in 1:Œª
        if Œõ[»∑] ‚â• 3
            r = Q[»∑]
            A‚Çä = copy(AÃÉ·µñ[»∑])
            A‚Çã = copy(AÃÉ·µñ[»∑])
            for j in 1:Œõ[»∑]-2
                A‚Çä[:, j+1] = A‚Çä[:, j] + Œî[:, j+r[1]]
                A‚Çã[:, Œõ[»∑]-j] = A‚Çã[:, Œõ[»∑]-j+1] - Œî[:, Œõ[»∑]-j+r[1]]
            end
            AÃÉ·µñ[»∑] = (A‚Çä + A‚Çã) / 2
        end
    end
    A·µñ = hcat(AÃÉ·µñ...) # n √ó n‚Ä≤ matrix
    return A·µñ .* T[bsplinesupport(P‚Ä≤,j) ‚äÜ bsplinesupport(P,i) for i in 1:n, j in 1:n‚Ä≤]
end

@doc raw"""
Return a coefficient matrix A which satisfy
```math
B_{(i,p_1,k_1)} = \sum_{j}A_{i,j}B_{(j,p_2,k_2)}
```

Assumption:
* ``P1 ‚âÉ P2``
"""
function _changebasis_sim(P1::AbstractBSplineSpace{p1,T1}, P2::AbstractBSplineSpace{p2,T2}) where {p1,p2,T1,T2}
    P1 ‚âÉ P2 || throw(DomainError((P1,P2),"P1 ‚âÉ P2 should be hold."))
    U = StaticArrays.arithmetic_closure(promote_type(T1,T2))
    n = dim(P1)
    v = (knotvector(P1).vector)[p1+1:end-p1]

    if length(v) > p1
        A = Matrix{U}(I, n, n)
        # TODO: Fix below
        vvv = [v[1] * (p1-i+1) / (p1+1) + v[i+1] * (i) / (p1+1) for i in 1:p1]
        A1 = [bsplinebasis‚Çä‚ÇÄ(P1,i,t) for i in 1:p1, t in vvv]
        A2 = [bsplinebasis‚Çä‚ÇÄ(P2,i,t) for i in 1:p1, t in vvv]
        A[1:p1, 1:p1] = A1 * inv(A2)
        vvv = [v[end-p1+i-1] * (p1-i+1) / (p1+1) + v[end] * (i) / (p1+1) for i in 1:p1]
        A1 = [bsplinebasis‚Çã‚ÇÄ(P1,i,t) for i in n-p1+1:n, t in vvv]
        A2 = [bsplinebasis‚Çã‚ÇÄ(P2,i,t) for i in n-p1+1:n, t in vvv]
        A[n-p1+1:n, n-p1+1:n] = A1 * inv(A2)
        # TODO: Fix above
    else
        # TODO: Fix below
        vvv = [v[1] * (n - i + 1) / (n + 1) + v[end] * (i) / (n + 1) for i in 1:n]
        A1 = [bsplinebasis‚Çã‚ÇÄ(P1,i,t) for i in 1:n, t in vvv]
        A2 = [bsplinebasis‚Çã‚ÇÄ(P2,i,t) for i in 1:n, t in vvv]
        A = A1 * inv(A2)
        # TODO: Fix above
    end
    return A
end

@doc raw"""
Return a coefficient matrix A which satisfy
```math
B_{(i,p,k)} = \sum_{j}A_{i,j}B_{(j,p',k')}
```

Assumption:
* ``P ‚äë P‚Ä≤``
"""
function _changebasis_I(P::AbstractBSplineSpace{p,T}, P‚Ä≤::AbstractBSplineSpace{p‚Ä≤,T‚Ä≤}) where {p,p‚Ä≤,T,T‚Ä≤}
    P ‚äë P‚Ä≤ || throw(DomainError((P,P‚Ä≤),"P ‚äë P‚Ä≤ should be hold."))
    k = knotvector(P)
    k‚Ä≤ = knotvector(P‚Ä≤)

    _P = BSplineSpace{p}(k[1+p:end-p] + p * KnotVector{T}(k[1+p], k[end-p]))
    _P‚Ä≤ = BSplineSpace{p‚Ä≤}(k‚Ä≤[1+p‚Ä≤:end-p‚Ä≤] + p‚Ä≤ * KnotVector{T‚Ä≤}(k‚Ä≤[1+p‚Ä≤], k‚Ä≤[end-p‚Ä≤]))
    _A = _changebasis_R(_P, _P‚Ä≤)
    Asim = _changebasis_sim(P, _P)
    Asim‚Ä≤ = _changebasis_sim(_P‚Ä≤, P‚Ä≤)
    A = Asim * _A * Asim‚Ä≤

    return A
end

function changebasis(P::AbstractBSplineSpace, P‚Ä≤::AbstractBSplineSpace)
    P ‚äÜ P‚Ä≤ && return _changebasis_R(P, P‚Ä≤)
    P ‚äë P‚Ä≤ && return _changebasis_I(P, P‚Ä≤)
    throw(DomainError((P, P‚Ä≤),"ùí´[p,k] ‚äÜ ùí´[p‚Ä≤,k‚Ä≤] or ùí´[p,k] ‚äë ùí´[p‚Ä≤,k‚Ä≤] must hold."))
end

# TODO: Add changebasis(::BSplineDerivativeSpace, )
