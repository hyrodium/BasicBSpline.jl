# Change Basis between B-Spline Spaces
# See https://hackmd.io/lpA0D0ySTQ6Hq1CdaaONxQ for more information.

@doc raw"""
Return a coefficient matrix A which satisfy
```math
B_{(i,p,k)} = \sum_{j}A_{i,j}B_{(j,p',k')}
```

Assumption:
* ``P ‚äÜ P^{\prime}``
"""
function _changebasis_R end

function _changebasis_R(P::AbstractBSplineSpace{0,T}, P‚Ä≤::AbstractBSplineSpace{p‚Ä≤,T‚Ä≤}) where {p‚Ä≤,T,T‚Ä≤}
    P ‚äÜ P‚Ä≤ || throw(DomainError((P,P‚Ä≤),"P ‚äÜ P‚Ä≤ should be hold."))
    U = StaticArrays.arithmetic_closure(promote_type(T,T‚Ä≤))
    n = dim(P)
    n‚Ä≤ = dim(P‚Ä≤)
    A‚Å∞ = U[bsplinesupport(P‚Ä≤, j) ‚äÜ bsplinesupport(P, i) for i in 1:n, j in 1:n‚Ä≤]
    A‚Å∞[:, findall(_iszeros(P‚Ä≤))] .= zero(U)  # Strictly this should be NaN, but we use zero here to support Rational.
    return A‚Å∞
end

function _changebasis_R(P::AbstractBSplineSpace{p,T}, P‚Ä≤::AbstractBSplineSpace{p‚Ä≤,T‚Ä≤}) where {p,p‚Ä≤,T,T‚Ä≤}
    P ‚äÜ P‚Ä≤ || throw(DomainError((P,P‚Ä≤),"P ‚äÜ P‚Ä≤ should be hold."))
    U = StaticArrays.arithmetic_closure(promote_type(T,T‚Ä≤))
    k = knotvector(P)
    k‚Ä≤ = knotvector(P‚Ä≤)
    n = dim(P)
    n‚Ä≤ = dim(P‚Ä≤)

    A·µñ‚Åª¬π = _changebasis_R(_lower(P), _lower(P‚Ä≤))  # (n+1) √ó (n‚Ä≤+1) matrix
    A·µñ = zeros(U, n, n‚Ä≤)  # n √ó n‚Ä≤ matrix

    Z = _iszeros(_lower(P‚Ä≤))
    W = findall(Z)
    K‚Ä≤ = [k‚Ä≤[i+p‚Ä≤] - k‚Ä≤[i] for i in 1:n‚Ä≤+1]
    K = [ifelse(k[i+p] ‚â† k[i], 1 / (k[i+p] - k[i]), 0.0) for i in 1:n+1]
    Œî = (p / p‚Ä≤) * [K‚Ä≤[j] * (K[i] * A·µñ‚Åª¬π[i, j] - K[i+1] * A·µñ‚Åª¬π[i+1, j]) for i in 1:n, j in 1:n‚Ä≤+1]
    A·µñ[:, 1] = Œî[:, 1]
    A·µñ[:, n‚Ä≤] = -Œî[:, n‚Ä≤+1]

    # split A·µñ for sub-block
    if length(W) == 0
        Q = [1:n‚Ä≤]
    else
        Q = [1:W[1]-1, [W[i]:W[i+1]-1 for i in 1:length(W)-1]..., W[end]:n‚Ä≤]
    end
    Œª = length(Q)
    Œõ = length.(Q)
    AÃÉ·µñ = [A·µñ[:, q] for q in Q]

    for »∑ in 2:Œª-1
        if Œõ[»∑] == 1
            # if B(i,p‚Ä≤,k‚Ä≤) = 0
            AÃÉ·µñ[»∑] .= zero(U)  # Strictly this should be NaN, but we use zero here to support Rational.
        end
    end
    for »∑ in 1:Œª-1
        if Œõ[»∑] ‚â• 2
            t = k‚Ä≤[W[»∑]]
            for i in 1:n
                AÃÉ·µñ[»∑][i, end] = bsplinebasis‚Çã‚ÇÄ(P,i,t)
            end
        end
    end
    for »∑ in 2:Œª
        if Œõ[»∑] ‚â• 2
            t = k‚Ä≤[W[»∑-1]+p]
            for i in 1:n
                AÃÉ·µñ[»∑][i, 1] = bsplinebasis‚Çä‚ÇÄ(P,i,t)
            end
        end
    end
    for »∑ in 1:Œª
        if Œõ[»∑] ‚â• 3
            r = Q[»∑]
            A‚Çä = copy(AÃÉ·µñ[»∑])
            A‚Çã = copy(AÃÉ·µñ[»∑])
            for j in 1:Œõ[»∑]-2
                A‚Çä[:, j+1] = A‚Çä[:, j] + Œî[:, j+r[1]]
                A‚Çã[:, Œõ[»∑]-j] = A‚Çã[:, Œõ[»∑]-j+1] - Œî[:, Œõ[»∑]-j+r[1]]
            end
            AÃÉ·µñ[»∑] = (A‚Çä + A‚Çã) / 2
        end
    end
    A·µñ = hcat(AÃÉ·µñ...) # n √ó n‚Ä≤ matrix
    return A·µñ .* T[bsplinesupport(P‚Ä≤,j) ‚äÜ bsplinesupport(P,i) for i in 1:n, j in 1:n‚Ä≤]
end

@doc raw"""
Return a coefficient matrix A which satisfy
```math
B_{(i,p_1,k_1)} = \sum_{j}A_{i,j}B_{(j,p_2,k_2)}
```

Assumption:
* ``P_1 ‚âÉ P_2``
"""
function _changebasis_sim(P1::AbstractBSplineSpace{p,T1}, P2::AbstractBSplineSpace{p,T2}) where {p,T1,T2}
    P1 ‚âÉ P2 || throw(DomainError((P1,P2),"P1 ‚âÉ P2 should be hold."))
    U = StaticArrays.arithmetic_closure(promote_type(T1,T2))
    n = dim(P1)
    a, b = extrema(domain(P1))

    A = Matrix{U}(I, n, n)
    A1 = @MMatrix zeros(U,p,p)
    A2 = @MMatrix zeros(U,p,p)
    for r in 1:p
        A1[:,r] = bsplinebasis‚Çä‚ÇÄ.(BSplineDerivativeSpace{r-1}(P1),1:p,a)
        A2[:,r] = bsplinebasis‚Çä‚ÇÄ.(BSplineDerivativeSpace{r-1}(P2),1:p,a)
    end
    A[1:p, 1:p] = A1/A2
    for r in 1:p
        A1[:,r] = bsplinebasis‚Çã‚ÇÄ.(BSplineDerivativeSpace{r-1}(P1),n-p+1:n,b)
        A2[:,r] = bsplinebasis‚Çã‚ÇÄ.(BSplineDerivativeSpace{r-1}(P2),n-p+1:n,b)
    end
    A[n-p+1:n, n-p+1:n] = A1/A2
    return A
end

@doc raw"""
Return a coefficient matrix A which satisfy
```math
B_{(i,p,k)} = \sum_{j}A_{i,j}B_{(j,p',k')}
```

Assumption:
* ``P ‚äë P^{\prime}``
"""
function _changebasis_I(P::AbstractBSplineSpace{p,T}, P‚Ä≤::AbstractBSplineSpace{p‚Ä≤,T‚Ä≤}) where {p,p‚Ä≤,T,T‚Ä≤}
    P ‚äë P‚Ä≤ || throw(DomainError((P,P‚Ä≤),"P ‚äë P‚Ä≤ should be hold."))
    k = knotvector(P)
    k‚Ä≤ = knotvector(P‚Ä≤)

    _P = BSplineSpace{p}(k[1+p:end-p] + p * KnotVector{T}(k[1+p], k[end-p]))
    _P‚Ä≤ = BSplineSpace{p‚Ä≤}(k‚Ä≤[1+p‚Ä≤:end-p‚Ä≤] + p‚Ä≤ * KnotVector{T‚Ä≤}(k‚Ä≤[1+p‚Ä≤], k‚Ä≤[end-p‚Ä≤]))
    _A = _changebasis_R(_P, _P‚Ä≤)
    Asim = _changebasis_sim(P, _P)
    Asim‚Ä≤ = _changebasis_sim(_P‚Ä≤, P‚Ä≤)
    A = Asim * _A * Asim‚Ä≤

    return A
end

## UniformBSplineSpace
function _changebasis_R(P::UniformBSplineSpace{p,T}, P‚Ä≤::UniformBSplineSpace{p,T‚Ä≤}) where {p,T,T‚Ä≤}
    P ‚äÜ P‚Ä≤ || throw(DomainError((P,P‚Ä≤),"P ‚äÜ P‚Ä≤ should be hold."))
    k = knotvector(P)
    k‚Ä≤ = knotvector(P‚Ä≤)
    r = round(Int, step(k)/step(k‚Ä≤))
    block = [r_nomial(p+1,i,r) for i in 0:(r-1)*(p+1)]/r^p
    n = dim(P)
    n‚Ä≤ = dim(P‚Ä≤)
    j = findfirst(==(k[1]), _vec(k‚Ä≤))
    A = zeros(StaticArrays.arithmetic_closure(T), n, n‚Ä≤)
    for i in 1:n
        A[i, j+r*(i-1):j+(r-1)*(p+1)+r*(i-1)] = block
    end
    return A
end
function _changebasis_I(P::UniformBSplineSpace{p,T}, P‚Ä≤::UniformBSplineSpace{p,T‚Ä≤}) where {p,T,T‚Ä≤}
    P ‚äë P‚Ä≤ || throw(DomainError((P,P‚Ä≤),"P ‚äë P‚Ä≤ should be hold."))
    k = knotvector(P)
    k‚Ä≤ = knotvector(P‚Ä≤)
    r = round(Int, step(k)/step(k‚Ä≤))
    block = [r_nomial(p+1,i,r) for i in 0:(r-1)*(p+1)]/r^p
    n = dim(P)
    n‚Ä≤ = dim(P‚Ä≤)
    A = zeros(StaticArrays.arithmetic_closure(T), n, n‚Ä≤)
    for i in 1:n
        a = r*i-(r-1)*(p+1)
        b = r*i
        rr = a:b
        if rr ‚äÜ 1:n‚Ä≤
            A[i,rr] = block
        else
            A[i,max(a,1):min(b,n‚Ä≤)] = block[max(a,1)-a+1:min(b,n‚Ä≤)-b+(r-1)*(p+1)+1]
        end
    end
    return A
end

## BSplineDerivativeSpace
function _changebasis_R(dP::BSplineDerivativeSpace{r,<:AbstractBSplineSpace{p}}, P‚Ä≤::AbstractBSplineSpace) where {r,p}
    dP ‚äÜ P‚Ä≤ || throw(DomainError((P,P‚Ä≤),"dP ‚äÜ P‚Ä≤ should be hold."))
    k = knotvector(dP)
    n = dim(dP)
    A = Matrix(I(n))
    for _r in 0:r-1
        _p = p - _r
        _A = zeros(n+_r,n+1+_r)
        for i in 1:n+_r
            _A[i,i] = _p/(k[i+_p]-k[i])
            _A[i,i+1] = -_p/(k[i+_p+1]-k[i+1])
        end
        A = A*_A
    end
    _P = BSplineSpace{degree(dP)}(k)
    A = A*_changebasis_R(_P, P‚Ä≤)
    return A
end
function _changebasis_R(dP::BSplineDerivativeSpace, dP‚Ä≤::BSplineDerivativeSpace{0})
    dP ‚äÜ dP‚Ä≤ || throw(DomainError((dP,dP‚Ä≤),"dP ‚äÜ dP‚Ä≤ should be hold."))
    P‚Ä≤ = bsplinespace(dP‚Ä≤)
    return _changebasis_R(dP, P‚Ä≤)
end
function _changebasis_R(dP::BSplineDerivativeSpace{r}, dP‚Ä≤::BSplineDerivativeSpace{r‚Ä≤}) where {r,r‚Ä≤}
    dP ‚äÜ dP‚Ä≤ || throw(DomainError((dP,dP‚Ä≤),"dP ‚äÜ dP‚Ä≤ should be hold."))
    if r > r‚Ä≤
        P = bsplinespace(dP)
        P‚Ä≤ = bsplinespace(dP‚Ä≤)
        _dP = BSplineDerivativeSpace{r-r‚Ä≤}(P)
        return _changebasis_R(_dP, P‚Ä≤)
    elseif r == r‚Ä≤
        P = bsplinespace(dP)
        P‚Ä≤ = bsplinespace(dP‚Ä≤)
        return _changebasis_R(P, P‚Ä≤)
    end
end
function _changebasis_R(P::AbstractBSplineSpace, dP‚Ä≤::BSplineDerivativeSpace{0})
    P‚Ä≤ = bsplinespace(dP‚Ä≤)
    return _changebasis_R(P, P‚Ä≤)
end

function changebasis(P::AbstractFunctionSpace, P‚Ä≤::AbstractFunctionSpace)
    P ‚äÜ P‚Ä≤ && return _changebasis_R(P, P‚Ä≤)
    P ‚äë P‚Ä≤ && return _changebasis_I(P, P‚Ä≤)
    throw(DomainError((P, P‚Ä≤),"ùí´[p,k] ‚äÜ ùí´[p‚Ä≤,k‚Ä≤] or ùí´[p,k] ‚äë ùí´[p‚Ä≤,k‚Ä≤] must hold."))
end
