# Refinement

# TODO: general dimension


refinement(M::BSplineManifold, Ps‚Ä≤::Tuple) = refinement(M, Ps‚Ä≤...)

@doc raw"""
Refinement of B-spline manifold with given B-spline spaces.
"""
function refinement(M::BSplineManifold{1}, Ps‚Ä≤::AbstractBSplineSpace...)
    Ps = bsplinespaces(M)
    a = controlpoints(M)
    n = dim.(Ps)
    n‚Ä≤ = dim.(Ps‚Ä≤)
    d = size(a,2)  # 2 == Dim+1

    A = changebasis.(Ps, Ps‚Ä≤)
    a‚Ä≤ = [sum(A[1][I‚ÇÅ, J‚ÇÅ] * a[I‚ÇÅ,i] for I‚ÇÅ in 1:n[1]) for J‚ÇÅ in 1:n‚Ä≤[1], i in 1:d]
    return BSplineManifold(Ps‚Ä≤, a‚Ä≤)
end

@doc raw"""
Refinement of B-spline manifold with given B-spline spaces.
"""
function refinement(M::BSplineManifold{2}, Ps‚Ä≤::AbstractBSplineSpace...)
    Ps = bsplinespaces(M)
    a = controlpoints(M)
    n = dim.(Ps)
    n‚Ä≤ = dim.(Ps‚Ä≤)
    d = size(a,3)  # 3 == Dim+1

    A = changebasis.(Ps, Ps‚Ä≤)
    a‚Ä≤ = [sum(A[1][I‚ÇÅ, J‚ÇÅ] * A[2][I‚ÇÇ, J‚ÇÇ] * a[I‚ÇÅ, I‚ÇÇ,i] for I‚ÇÅ in 1:n[1], I‚ÇÇ in 1:n[2]) for J‚ÇÅ in 1:n‚Ä≤[1], J‚ÇÇ in 1:n‚Ä≤[2], i in 1:d]
    return BSplineManifold(Ps‚Ä≤, a‚Ä≤)
end


@doc raw"""
Refinement of B-spline manifold with given B-spline spaces.
"""
function refinement(M::AbstractBSplineManifold, Ps‚Ä≤::Vector{<:AbstractBSplineSpace})
    Ps = collect(bsplinespaces(M))
    a = controlpoints(M)
    d = length(Ps)
    n = dim.(Ps)
    n‚Ä≤ = dim.(Ps‚Ä≤)

    A = changebasis.(Ps, Ps‚Ä≤)
    # TODO: general dimension
    if d == 1
        a‚Ä≤ = [sum(A[1][I‚ÇÅ, J‚ÇÅ] * a[I‚ÇÅ] for I‚ÇÅ in 1:n[1]) for J‚ÇÅ in 1:n‚Ä≤[1]]
    elseif d == 2
        a‚Ä≤ = [sum(A[1][I‚ÇÅ, J‚ÇÅ] * A[2][I‚ÇÇ, J‚ÇÇ] * a[I‚ÇÅ, I‚ÇÇ] for I‚ÇÅ in 1:n[1], I‚ÇÇ in 1:n[2]) for J‚ÇÅ in 1:n‚Ä≤[1], J‚ÇÇ in 1:n‚Ä≤[2]]
    elseif d == 3
        a‚Ä≤ = [
            sum(A[1][I‚ÇÅ, J‚ÇÅ] * A[2][I‚ÇÇ, J‚ÇÇ] * A[3][I‚ÇÉ, J‚ÇÉ] * a[I‚ÇÅ, I‚ÇÇ, I‚ÇÉ] for I‚ÇÅ in 1:n[1], I‚ÇÇ in 1:n[2], I‚ÇÉ in 1:n[3])
            for J‚ÇÅ in 1:n‚Ä≤[1], J‚ÇÇ in 1:n‚Ä≤[2], J‚ÇÉ in 1:n‚Ä≤[3]
        ]
    end
    return (typeof(M).name.wrapper)(Ps‚Ä≤, a‚Ä≤)
end


@doc raw"""
Refinement of B-spline manifold with additional degree and knots.
"""
function refinement(M::BSplineManifold{Dim}; p‚Çä::Union{Nothing,NTuple{Dim,Int}}=nothing, k‚Çä::Union{Nothing,NTuple{Dim,Knots{T}}}=nothing) where {Dim, T}
    Ps = bsplinespaces(M)
    if isnothing(p‚Çä)
        p‚Çä = tuple(zeros(Int, Dim)...)
    elseif length(Ps) ‚â† length(p‚Çä)
        throw(DimensionMismatch())
    end
    if isnothing(k‚Çä)
        k‚Çä = tuple(zeros(Knots, Dim)...)
    elseif length(Ps) ‚â† length(k‚Çä)
        throw(DimensionMismatch())
    end

    Ps‚Ä≤ = [(P = Ps[i];
    p = degree(P);
    k = knots(P);
    k_unique = unique(k[1+p:end-p]);
    BSplineSpace{p + p‚Çä[i]}(k + p‚Çä[i] * k_unique + k‚Çä[i])) for i in eachindex(Ps)]

    return refinement(M, tuple(Ps‚Ä≤...))
end

@doc raw"""
Refinement of B-spline manifold with additional degree and knots.
"""
function refinement(M::AbstractBSplineManifold; p‚Çä::Union{Nothing,AbstractVector{<:Integer}} = nothing, k‚Çä::Union{Nothing,Vector{<:Knots}} = nothing)
    Ps = collect(bsplinespaces(M))
    ùíÇ = controlpoints(M)
    d = length(Ps)
    n = dim.(Ps)
    if isnothing(p‚Çä)
        p‚Çä = zeros(Int, d)
    elseif length(Ps) ‚â† length(p‚Çä)
        throw(DimensionMismatch())
    end
    if isnothing(k‚Çä)
        k‚Çä = zeros(Knots, d)
    elseif length(Ps) ‚â† length(k‚Çä)
        throw(DimensionMismatch())
    end

    Ps‚Ä≤ = [(P = Ps[i];
    p = degree(P);
    k = knots(P);
    k_unique = unique(k[1+p:end-p]);
    typeof(P).name.wrapper{p + p‚Çä[i]}(k + p‚Çä[i] * k_unique + k‚Çä[i])) for i in eachindex(Ps)]

    return refinement(M, Ps‚Ä≤)
end
