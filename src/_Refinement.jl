# Refinement

@doc raw"""
Return a coefficient matrix A which satisfy
```math
B_{(i,p,k)} = \sum_{j}A_{i,j}B_{(j,p',k')}
```

Assumption:
* ``P ‚äÜ P‚Ä≤``
"""
function _changebasis_R(P::AbstractBSplineSpace, P‚Ä≤::AbstractBSplineSpace)::Matrix{Float64}
    p = degree(P)
    k = knots(P)
    p‚Ä≤ = degree(P‚Ä≤)
    k‚Ä≤ = knots(P‚Ä≤)
    p‚Çä = p‚Ä≤ - p

    if p == 0
        n = length(k) - 1
        n‚Ä≤ = length(k‚Ä≤) - p‚Çä - 1
        A‚Å∞ = Float64[bsplinesupport(j, typeof(P‚Ä≤)(p‚Çä, k‚Ä≤)) ‚äÜ bsplinesupport(i, typeof(P)(0, k)) for i in 1:n, j in 1:n‚Ä≤]
        A‚Å∞[:, findall(iszeros(P‚Ä≤))] .= NaN
        return A‚Å∞
    end

    A·µñ‚Åª¬π = _changebasis_R(typeof(P)(p - 1, k), typeof(P‚Ä≤)(p‚Ä≤ - 1, k‚Ä≤)) # (n+1) √ó (n‚Ä≤+1) matrix
    n = dim(P)
    n‚Ä≤ = dim(P‚Ä≤)
    Z = iszeros(typeof(P‚Ä≤)(p‚Ä≤ - 1, k‚Ä≤))
    W = findall(Z)
    K‚Ä≤ = [k‚Ä≤[i+p‚Ä≤] - k‚Ä≤[i] for i in 1:n‚Ä≤+1]
    K = [ifelse(k[i+p] ‚â† k[i], 1 / (k[i+p] - k[i]), 0.0) for i in 1:n+1]
    Œî = (p / p‚Ä≤) * [K‚Ä≤[j] * (K[i] * A·µñ‚Åª¬π[i, j] - K[i+1] * A·µñ‚Åª¬π[i+1, j]) for i in 1:n, j in 1:n‚Ä≤+1]
    A·µñ = zeros(n, n‚Ä≤)
    A·µñ[:, 1] = Œî[:, 1]
    A·µñ[:, n‚Ä≤] = -Œî[:, n‚Ä≤+1]

    # split A·µñ for sub-block
    if length(W) == 0
        Q = [1:n‚Ä≤]
    else
        Q = [1:W[1]-1, [W[i]:W[i+1]-1 for i in 1:length(W)-1]..., W[end]:n‚Ä≤]
    end
    Œª = length(Q)
    Œõ = length.(Q)
    AÃÉ·µñ = [A·µñ[:, q] for q in Q]

    for »∑ in 2:Œª-1
        if Œõ[»∑] == 1
            # if B(i,p‚Ä≤,k‚Ä≤) = 0
            AÃÉ·µñ[»∑] .= NaN
        end
    end
    for »∑ in 1:Œª-1
        if Œõ[»∑] ‚â• 2
            t = k‚Ä≤[W[»∑]]
            for i in 1:n
                AÃÉ·µñ[»∑][i, end] = bsplinebasis‚Çã‚ÇÄ(i, P, t)
            end
        end
    end
    for »∑ in 2:Œª
        if Œõ[»∑] ‚â• 2
            t = k‚Ä≤[W[»∑-1]+p]
            for i in 1:n
                AÃÉ·µñ[»∑][i, 1] = bsplinebasis‚Çä‚ÇÄ(i, P, t)
            end
        end
    end
    for »∑ in 1:Œª
        if Œõ[»∑] ‚â• 3
            r = Q[»∑]
            A‚Çä = copy(AÃÉ·µñ[»∑])
            A‚Çã = copy(AÃÉ·µñ[»∑])
            for j in 1:Œõ[»∑]-2
                A‚Çä[:, j+1] = A‚Çä[:, j] + Œî[:, j+r[1]]
                A‚Çã[:, Œõ[»∑]-j] = A‚Çã[:, Œõ[»∑]-j+1] - Œî[:, Œõ[»∑]-j+r[1]]
            end
            AÃÉ·µñ[»∑] = (A‚Çä + A‚Çã) / 2
        end
    end
    A·µñ = hcat(AÃÉ·µñ...) # n √ó n‚Ä≤ matrix
    return A·µñ .* Float64[bsplinesupport(j, P‚Ä≤) ‚äÜ bsplinesupport(i, P) for i in 1:n, j in 1:n‚Ä≤]
end



@doc raw"""
Return a coefficient matrix A which satisfy
```math
B_{(i,p_1,k_1)} = \sum_{j}A_{i,j}B_{(j,p_2,k_2)}
```

Assumption:
* ``P1 ‚äë P2``
* ``P2 ‚äë P1``
"""
function _changebasis_sim(P1::AbstractBSplineSpace, P2::AbstractBSplineSpace)
    # if P1 ‚ã¢ P2
    #     error("P1 ‚ã¢ P2")
    # end
    # if P2 ‚ã¢ P1
    #     error("P2 ‚ã¢ P1")
    # end
    n = dim(P1)
    p = degree(P1)
    v = (knots(P1).vector)[p+1:end-p]

    if length(v) > p
        A = Matrix{Float64}(I, n, n)
        # TODO: Fix below
        vvv = [v[1] * (p - i + 1) / (p + 1) + v[i+1] * (i) / (p + 1) for i in 1:p]
        A1 = [bsplinebasis‚Çä‚ÇÄ(i, P1, t) for i in 1:p, t in vvv]
        A2 = [bsplinebasis‚Çä‚ÇÄ(i, P2, t) for i in 1:p, t in vvv]
        A[1:p, 1:p] = A1 * inv(A2)
        vvv = [v[end-p+i-1] * (p - i + 1) / (p + 1) + v[end] * (i) / (p + 1) for i in 1:p]
        A1 = [bsplinebasis‚Çã‚ÇÄ(i, P1, t) for i in n-p+1:n, t in vvv]
        A2 = [bsplinebasis‚Çã‚ÇÄ(i, P2, t) for i in n-p+1:n, t in vvv]
        A[n-p+1:n, n-p+1:n] = A1 * inv(A2)
        # TODO: Fix above
    else
        # TODO: Fix below
        vvv = [v[1] * (n - i + 1) / (n + 1) + v[end] * (i) / (n + 1) for i in 1:n]
        A1 = [bsplinebasis‚Çã‚ÇÄ(i, P1, t) for i in 1:n, t in vvv]
        A2 = [bsplinebasis‚Çã‚ÇÄ(i, P2, t) for i in 1:n, t in vvv]
        A = A1 * inv(A2)
        # TODO: Fix above
    end
    return A
end


@doc raw"""
Return a coefficient matrix A which satisfy
```math
B_{(i,p,k)} = \sum_{j}A_{i,j}B_{(j,p',k')}
```

Assumption:
* ``P ‚äë P‚Ä≤``
"""
function _changebasis_I(P::AbstractBSplineSpace, P‚Ä≤::AbstractBSplineSpace)::Matrix{Float64}
    I = bsplineunity(P)
    p = degree(P)
    k = knots(P)
    p‚Ä≤ = degree(P‚Ä≤)
    k‚Ä≤ = knots(P‚Ä≤)
    p‚Çä = p‚Ä≤ - p

    _P = typeof(P)(p, k[1+p:end-p] + p * Knots(k[1+p], k[end-p]))
    # if dim(_P) ‚â† dim(P)
    #     error("dim(_P)‚â†dim(P)")
    # end
    _P‚Ä≤ = typeof(P‚Ä≤)(p‚Ä≤, k‚Ä≤[1+p‚Ä≤:end-p‚Ä≤] + p‚Ä≤ * Knots(k‚Ä≤[1+p‚Ä≤], k‚Ä≤[end-p‚Ä≤]))
    # if dim(_P‚Ä≤) ‚â† dim(P‚Ä≤)
    #     error("dim(_P‚Ä≤)‚â†dim(P‚Ä≤)")
    # end
    _A = _changebasis_R(_P, _P‚Ä≤)
    Asim = _changebasis_sim(P, _P)
    Asim‚Ä≤ = _changebasis_sim(_P‚Ä≤, P‚Ä≤)
    A = Asim * _A * Asim‚Ä≤

    return A
end

function changebasis(P::AbstractBSplineSpace, P‚Ä≤::AbstractBSplineSpace)
    if P ‚äÜ P‚Ä≤
        return _changebasis_R(P, P‚Ä≤)
    elseif P ‚äë P‚Ä≤
        return _changebasis_I(P, P‚Ä≤)
    else
        throw(DomainError((P, P‚Ä≤),"ùí´[p,k] ‚äÜ ùí´[p‚Ä≤,k‚Ä≤] or ùí´[p,k] ‚äë ùí´[p‚Ä≤,k‚Ä≤] must hold."))
    end
end


@doc raw"""
Refinement of B-spline manifold with given B-spline spaces.
"""
function refinement(M::AbstractBSplineManifold, Ps‚Ä≤::Vector{<:AbstractBSplineSpace})
    Ps = collect(bsplinespaces(M))
    a = controlpoints(M)
    d = length(Ps)
    n = dim.(Ps)
    n‚Ä≤ = dim.(Ps‚Ä≤)

    A = changebasis.(Ps, Ps‚Ä≤)
    # TODO: general dimension
    if d == 1
        a‚Ä≤ = [sum(A[1][I‚ÇÅ, J‚ÇÅ] * a[I‚ÇÅ] for I‚ÇÅ in 1:n[1]) for J‚ÇÅ in 1:n‚Ä≤[1]]
    elseif d == 2
        a‚Ä≤ = [sum(A[1][I‚ÇÅ, J‚ÇÅ] * A[2][I‚ÇÇ, J‚ÇÇ] * a[I‚ÇÅ, I‚ÇÇ] for I‚ÇÅ in 1:n[1], I‚ÇÇ in 1:n[2]) for J‚ÇÅ in 1:n‚Ä≤[1], J‚ÇÇ in 1:n‚Ä≤[2]]
    elseif d == 3
        a‚Ä≤ = [
            sum(A[1][I‚ÇÅ, J‚ÇÅ] * A[2][I‚ÇÇ, J‚ÇÇ] * A[3][I‚ÇÉ, J‚ÇÉ] * a[I‚ÇÅ, I‚ÇÇ, I‚ÇÉ] for I‚ÇÅ in 1:n[1], I‚ÇÇ in 1:n[2], I‚ÇÉ in 1:n[3])
            for J‚ÇÅ in 1:n‚Ä≤[1], J‚ÇÇ in 1:n‚Ä≤[2], J‚ÇÉ in 1:n‚Ä≤[3]
        ]
    end
    return (typeof(M).name.wrapper)(Ps‚Ä≤, a‚Ä≤)
end


@doc raw"""
Refinement of B-spline manifold with additional degree and knots.
"""
function refinement(M::AbstractBSplineManifold; p‚Çä::Union{Nothing,AbstractVector{<:Integer}} = nothing, k‚Çä::Union{Nothing,Vector{Knots}} = nothing)
    Ps = collect(bsplinespaces(M))
    ùíÇ = controlpoints(M)
    d = length(Ps)
    n = dim.(Ps)
    if isnothing(p‚Çä)
        p‚Çä = zeros(Int, d)
    elseif length(Ps) ‚â† length(p‚Çä)
        throw(DimensionMismatch())
    end
    if isnothing(k‚Çä)
        k‚Çä = zeros(Knots, d)
    elseif length(Ps) ‚â† length(k‚Çä)
        throw(DimensionMismatch())
    end

    Ps‚Ä≤ = [(P = Ps[i];
    p = degree(P);
    k = knots(P);
    k_unique = unique(k[1+p:end-p]);
    typeof(P)(p + p‚Çä[i], k + p‚Çä[i] * k_unique + k‚Çä[i])) for i in eachindex(Ps)]

    return refinement(M, Ps‚Ä≤)
end
