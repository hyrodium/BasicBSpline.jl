# Refinement
function changebasis(P::BSplineSpace, P‚Ä≤::BSplineSpace)::Array{Float64,2}
    p = degree(P)
    k = knots(P)
    p‚Ä≤ = P‚Ä≤.degree
    k‚Ä≤ = P‚Ä≤.knots
    p‚Çä = p‚Ä≤-p
    if P ‚äà P‚Ä≤
        error("ùí´[p,k] ‚äÑ ùí´[p‚Ä≤,k‚Ä≤]")
    end

    if p == 0
        n = length(k)-1
        n‚Ä≤ = length(k‚Ä≤)-p‚Çä-1
        A‚Å∞ = Float64[bsplinesupport(j,BSplineSpace(p‚Çä,k‚Ä≤)) ‚äÜ bsplinesupport(i,BSplineSpace(0,k)) for i ‚àà 1:n, j ‚àà 1:n‚Ä≤]
        A‚Å∞[:,findall(iszeros(P‚Ä≤))] .= NaN
        return A‚Å∞
    end

    A·µñ‚Åª¬π = changebasis(BSplineSpace(p-1, k), BSplineSpace(p‚Ä≤-1, k‚Ä≤))
    n = dim(P)
    n‚Ä≤ = dim(P‚Ä≤)
    Z = iszeros(BSplineSpace(p‚Ä≤-1,k‚Ä≤))
    W = findall(Z)
    K‚Ä≤ = [k‚Ä≤[i+p‚Ä≤]-k‚Ä≤[i] for i ‚àà 1:n‚Ä≤+1]
    K = [ifelse(k[i+p]‚â†k[i], 1/(k[i+p]-k[i]), 0.0) for i ‚àà 1:n+1]
    Œî = (p/p‚Ä≤)*[K‚Ä≤[j]*(K[i]*A·µñ‚Åª¬π[i,j]-K[i+1]*A·µñ‚Åª¬π[i+1,j]) for i ‚àà 1:n, j ‚àà 1:n‚Ä≤+1]
    A·µñ = zeros(n,n‚Ä≤)
    A·µñ[:,1] = Œî[:,1]
    A·µñ[:,n‚Ä≤] = -Œî[:,n‚Ä≤+1]

    if length(W) == 0
        Q = [1:n‚Ä≤]
    else
        Q = [1:W[1]-1,[W[i]:W[i+1]-1 for i ‚àà 1:length(W)-1]...,W[end]:n‚Ä≤]
    end
    l = length(Q)
    L = length.(Q)
    AÃÉ·µñ = [A·µñ[:,q] for q ‚àà Q]

    for »∑ ‚àà 2:l-1
        if L[»∑] == 1
            AÃÉ·µñ[»∑] .= NaN
        end
    end
    for »∑ ‚àà 1:l-1
        if L[»∑] ‚â• 2
            t = k‚Ä≤[W[»∑]]
            AÃÉ·µñ[»∑][:,end] = bsplinebasis‚Çã‚ÇÄ(BSplineSpace(p,k),t)
        end
    end
    for »∑ ‚àà 2:l
        if L[»∑] ‚â• 2
            t = k‚Ä≤[W[»∑-1]+p]
            AÃÉ·µñ[»∑][:,1] = bsplinebasis‚Çä‚ÇÄ(BSplineSpace(p,k),t)
        end
    end
    for »∑ ‚àà 1:l
        if L[»∑] ‚â• 3
            r = Q[»∑]
            A‚Çä = copy(AÃÉ·µñ[»∑])
            A‚Çã = copy(AÃÉ·µñ[»∑])
            for j ‚àà 1:L[»∑]-2
                A‚Çä[:,j+1] = A‚Çä[:,j]+Œî[:,j+r[1]]
                A‚Çã[:,L[»∑]-j] = A‚Çã[:,L[»∑]-j+1]-Œî[:,L[»∑]-j+r[1]]
            end
            AÃÉ·µñ[»∑] = (A‚Çä+A‚Çã)/2
        end
    end
    A·µñ = hcat(AÃÉ·µñ...)
    return A·µñ .* Float64[bsplinesupport(j,P‚Ä≤) ‚äÜ bsplinesupport(i,P) for i ‚àà 1:n, j ‚àà 1:n‚Ä≤]
end

function changebasis(P::AbstractBSplineSpace, P‚Ä≤::AbstractBSplineSpace)
    return changebasis(BSplineSpace(P), BSplineSpace(P‚Ä≤))
end


@doc raw"""
Refinement of B-spline manifold with given B-spline spaces.
"""
function refinement(M::AbstractBSplineManifold, Ps‚Ä≤::Array{T,1} where T <: AbstractBSplineSpace)
    Ps = M.bsplinespaces
    ùíÇ = M.controlpoints
    dÃÇ = size(ùíÇ)[end]
    d = length(Ps)
    n = dim.(Ps)
    n‚Ä≤ = dim.(Ps‚Ä≤)

    A = changebasis.(Ps,Ps‚Ä≤)
    # TODO: general dimension
    if d == 1
        ùíÇ‚Ä≤ = [sum(A[1][I‚ÇÅ,J‚ÇÅ]*ùíÇ[I‚ÇÅ,i] for I‚ÇÅ ‚àà 1:n[1]) for J‚ÇÅ ‚àà 1:n‚Ä≤[1], i ‚àà 1:dÃÇ]
    elseif d == 2
        ùíÇ‚Ä≤ = [sum(A[1][I‚ÇÅ,J‚ÇÅ]*A[2][I‚ÇÇ,J‚ÇÇ]*ùíÇ[I‚ÇÅ,I‚ÇÇ,i] for I‚ÇÅ ‚àà 1:n[1], I‚ÇÇ ‚àà 1:n[2]) for J‚ÇÅ ‚àà 1:n‚Ä≤[1], J‚ÇÇ ‚àà 1:n‚Ä≤[2], i ‚àà 1:dÃÇ]
    elseif d == 3
        ùíÇ‚Ä≤ = [sum(A[1][I‚ÇÅ,J‚ÇÅ]*A[2][I‚ÇÇ,J‚ÇÇ]*A[3][I‚ÇÉ,J‚ÇÉ]*ùíÇ[I‚ÇÅ,I‚ÇÇ,I‚ÇÉ,i] for I‚ÇÅ ‚àà 1:n[1], I‚ÇÇ ‚àà 1:n[2], I‚ÇÉ ‚àà 1:n[3]) for J‚ÇÅ ‚àà 1:n‚Ä≤[1], J‚ÇÇ ‚àà 1:n‚Ä≤[2], J‚ÇÉ ‚àà 1:n‚Ä≤[3], i ‚àà 1:dÃÇ]
    end
    return typeof(M)(Ps‚Ä≤, ùíÇ‚Ä≤)
end


@doc raw"""
Refinement of B-spline manifold with additional degree and knots.
"""
function refinement(M::AbstractBSplineManifold; p‚Çä::Union{Nothing,AbstractArray{<:Integer,1}}=nothing, k‚Çä::Union{Nothing,Array{Knots,1}}=nothing)
    Ps = M.bsplinespaces
    ùíÇ = M.controlpoints
    d = length(Ps)
    dÃÇ = size(ùíÇ)[end]
    n = dim.(Ps)
    if p‚Çä == nothing
        p‚Çä = zeros(Int,d)
    elseif length(Ps) ‚â† length(p‚Çä)
        error("dimension does not match")
    end
    if k‚Çä == nothing
        k‚Çä = zeros(Knots,d)
    elseif length(Ps) ‚â† length(k‚Çä)
        error("dimension does not match")
    end

    Ps‚Ä≤ = similar(Ps)
    for i ‚àà 1:length(Ps)
        P = Ps[i]
        p = degree(P)
        k = knots(P)
        Ps‚Ä≤[i] = FastBSplineSpace(p+p‚Çä[i], k+p‚Çä[i]*unique(k)+k‚Çä[i])
    end

    return refinement(M, Ps‚Ä≤)
end
